<?php
{% set dateOptions = false %}
namespace {{ namespace }}\Form\{{ entity_class }};

{% block use_statements %}
use AppBundle\Entity\{{ entity_class }};
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;{{ '\n' }}
{%- for key , use in uses -%}
use Symfony\Component\Form\Extension\Core\Type\{{ use }};{{ '\n' }}
{%- endfor %}
use Symfony\Component\OptionsResolver\OptionsResolver;
{% if annotations.authorSubscriber == true %}
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use Opstalent\ApiBundle\Form\EventListener\AuthorSubscriber;
{%  endif  %}
{% endblock use_statements %}

{% block class_definition %}
class AddType extends AbstractType
{% endblock class_definition %}
{
{% block class_body %}

    {% if annotations.authorSubscriber == true %}
    private $tokenStorage;

    /**
     * AddType constructor.
     * @param TokenStorageInterface $tokenStorage
     */
    public function __construct(TokenStorageInterface $tokenStorage)
    {
        $this->tokenStorage = $tokenStorage;
    }
    {%  endif  %}


    {%- if fields|length > 0 %}
    /**
     *   {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder{{ '\n' }}
{%- for key , field in fields -%}
{% if key == "created" or key == "updated" %}
{% elseif  field.type == 'DateTimeType' or field.type == 'DateType'%} {% set dateOptions = true %}
            ->add('{{ key }}', {{ field.type }}::class, [{% if field.nullable == false %}'required' => true{% else %}'required' => false{% endif %}, 'mapped' => true, 'widget' => 'single_text', 'format' => $options['date_format']])
{% else %}
            ->add('{{ key }}', {{ field.type }}::class, [{% if field.nullable == false %}'required' => true{% else %}'required' => false{% endif %}, 'mapped' => true])
{% endif %}
{%- endfor %}
    {% if annotations.authorSubscriber == true %}
            ->addEventSubscriber(new AuthorSubscriber($this->tokenStorage, 'user'))
    {%  endif  %}
        ;
    }

    /**
     *   {@inheritdoc}
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                'data_class' => {{ entity_class }}::class,
                'method' => 'POST',
            ]){% if dateOptions == true %}->setDefault('date_format', 'yyyy-MM-dd')
            ->setAllowedTypes('date_format', 'string');{{ '\n' }}{% endif %}
    }
{% endif %}

{% endblock class_body %}
}

